/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/v1/companies": {
    /**
     * Search for companies.
     *
     * Passing an `authorizer_user_id` will filter to companies whose Authorizer match the received user ID.
     * Passing a query `q` will filter by:
     * - Registry Business Name
     * - Registry Business Number
     * - Company ID
     */
    get: operations["MdmWeb.Api.V1.KYCController.search_companies"];
    /** Registers a company in SaltPay. */
    post: operations["MdmWeb.Api.V1.KYCController.create_company"];
  };
  "/api/v1/companies/{company_id}": {
    /** Shows a given company's KYC information. */
    get: operations["MdmWeb.Api.V1.KYCController.show_company"];
    /** Updates a given company's KYC information. */
    patch: operations["MdmWeb.Api.V1.KYCController.update_company"];
  };
  "/api/v1/companies/{company_id}/history": {
    /** Retrieves all modifications done to a company. */
    get: operations["MdmWeb.Api.V1.KYCController.get_company_history"];
  };
  "/api/v1/documents": {
    /** Upload Person Document */
    post: operations["MdmWeb.Api.V1.KYCController.upload_person_document"];
  };
  "/api/v1/people": {
    /** Registers a Person */
    post: operations["MdmWeb.Api.V1.KYCController.create_person"];
  };
  "/api/v1/people/{person_id}": {
    /** Show Person by given ID */
    get: operations["MdmWeb.Api.V1.KYCController.show_person"];
    /** Deletes a Person */
    delete: operations["MdmWeb.Api.V1.KYCController.remove_person"];
    /** Update an Person */
    patch: operations["MdmWeb.Api.V1.KYCController.update_person"];
  };
  "/api/v1/stores": {
    /**
     * Lists stores, filtered by the company_id or search query, if present.
     *
     * Passing a query will filter by:
     * - `Store DBA name`
     * - `Store ID`
     * - `Store Short ID`
     * - `Company Registry Name`
     * - `Company Registry Number`
     */
    get: operations["MdmWeb.Api.V1.KYCController.search_stores"];
    /** Registers a store in SaltPay. */
    post: operations["MdmWeb.Api.V1.KYCController.create_store"];
  };
  "/api/v1/stores/{store_id}": {
    /** Shows a given store's KYC information. */
    get: operations["MdmWeb.Api.V1.KYCController.show_store"];
    /** Updates a given store's KYC information. */
    patch: operations["MdmWeb.Api.V1.KYCController.update_store"];
  };
  "/api/v1/stores/{store_id}/history": {
    /** Retrieves all modifications done to a store. */
    get: operations["MdmWeb.Api.V1.KYCController.get_store_history"];
  };
}

export interface components {
  schemas: {
    /**
     * NotFound
     * @description NotFound
     * @example [object Object]
     */
    NotFound: {
      /** @description The errors of each field */
      errors?: { [key: string]: unknown };
    };
    /**
     * UploadPersonDocumentRequest
     * @description Body for upload person document
     */
    UploadPersonDocumentRequest: {
      /**
       * @description Image Base 64 encoded
       * @example QUJD
       */
      image_base64: string;
      /**
       * Format: uuid
       * @description Person UUID
       * @example ffe1cd43-1f43-47f5-afa7-438d5baef783
       */
      person_id: string;
      /**
       * @description Document type
       * @example DRIVER_LICENSE_BACK
       * @enum {string}
       */
      type:
        | "ID_FRONT"
        | "ID_BACK"
        | "PASSPORT_FRONT"
        | "DRIVER_LICENSE_FRONT"
        | "DRIVER_LICENSE_BACK";
    };
    /**
     * PersonDocument
     * @description PersonDocument
     */
    PersonDocument: {
      /**
       * Format: uuid
       * @description Person document UUID
       * @example 78868a92-553e-470d-9ae5-bc30a6655109
       */
      id?: string;
      /**
       * @description Filepath on s3
       * @example https://s3.amazonaws.com/test/ffe1cd43-1f43-47f5-afa7-438d5baef783/store_id_ffe1cd43-1f43-47f5-afa7-438d5baef783.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAJM35PWKL5YZ5PUZQ%2F20210816%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210816T192959Z&X-Amz-Expires=300&X-Amz-SignedHeaders=host&X-Amz-Signature=a599c10231fae8956bbc2e9eab2109c7c85963d7dfd8d0223db5b41db9006c9b
       */
      path: string;
      /**
       * Format: uuid
       * @description Person UUID
       * @example ffe1cd43-1f43-47f5-afa7-438d5baef783
       */
      person_id?: string;
      /**
       * @description Type of the document
       * @example DRIVER_LICENSE_FRONT
       * @enum {string}
       */
      type:
        | "PASSPORT_FRONT"
        | "ID_FRONT"
        | "ID_BACK"
        | "DRIVER_LICENSE_FRONT"
        | "DRIVER_LICENSE_BACK";
    };
    /**
     * Company
     * @description Company
     */
    Company: {
      authorizer?: components["schemas"]["Person"];
      /**
       * Format: uuid
       * @example 4b8fc17c-89e7-43b8-8f19-be6c329e1c5f
       */
      authorizer_id?: string;
      /**
       * @description Billing E-mail
       * @example company@saltpay.co
       */
      billing_email?: string | null;
      charging_bank_account?: components["schemas"]["ChargingBankAccount"];
      /**
       * Format: uuid
       * @description Company ID
       * @example 78868a92-553e-470d-9ae5-bc30a6655109
       */
      id?: string;
      /**
       * Format: date-time
       * @description Datetime of creation (ISO 8601)
       */
      inserted_at?: string;
      /**
       * @description LIMITED or SOLE_TRADER
       * @example LIMITED
       * @enum {string}
       */
      legal_structure?: "LIMITED" | "SOLE_TRADER";
      /** @description Legal business registered address */
      registered_address?: components["schemas"]["Address"];
      /**
       * @description Registration business name
       * @example Company Name
       */
      registered_name?: string;
      /**
       * @description Registration business number. Must be unique per country
       * @example 123456789
       */
      registered_number?: string;
      shareholders?: components["schemas"]["Shareholder"][];
      /**
       * @description Number of registered stores
       * @example 3
       */
      store_count?: number | null;
      /**
       * Format: date-time
       * @description Datetime of last update (ISO 8601)
       */
      updated_at?: string;
      /**
       * @description Value Added Tax (VAT)
       * @example IS123456
       */
      vat_number?: string | null;
    };
    /**
     * PersonResponse
     * @description Person Response
     */
    PersonResponse: {
      person: components["schemas"]["Person"];
    };
    /**
     * Person
     * @description The Person data
     */
    Person: {
      address?: components["schemas"]["Address"] | null;
      /**
       * Format: date
       * @description Person's birth date following the `yyyy-MM-dd` format (Date, ISO 8601)
       * @example 1991-09-24
       */
      birth_date?: string | null;
      /**
       * @description Country code (ISO 3166-1 alpha-2) of the person's national id issuer. (country cannot be null if national_id_number is presented)
       * @example PT
       */
      country?: string | null;
      /** @description Person Documents */
      documents?: components["schemas"]["PersonDocument"][] | null;
      /**
       * Format: email
       * @description Email address
       * @example firstlast@email.com
       */
      email?: string | null;
      /**
       * @description First Name
       * @example First
       */
      first_name?: string;
      /**
       * Format: uuid
       * @description Person UUID
       * @example ffe1cd43-1f43-47f5-afa7-438d5baef783
       */
      id?: string;
      /**
       * @description Person last name
       * @example Last
       */
      last_name?: string;
      locale?: components["schemas"]["Locale"];
      /**
       * @description Person middle name
       * @example Middle
       */
      middle_name?: string | null;
      /**
       * @description Person national ID
       * @example 12345678991
       */
      national_id_number?: string | null;
      /**
       * @description Phone number with the `+` sign and the country code (ITU-T E.164)
       * @example +351112345678
       */
      phone?: string | null;
      /**
       * Format: uuid
       * @description User UUID
       * @example ffe1cd43-1f43-47f5-afa7-438d5baef783
       */
      user_id?: string | null;
    };
    /**
     * Store
     * @description Store
     */
    Store: {
      /**
       * @description Is the Store Active?
       * @example true
       */
      active?: boolean;
      /**
       * @description Billing E-mail
       * @example store@saltpay.co
       */
      billing_email?: string | null;
      charging_bank_account?:
        | components["schemas"]["ChargingBankAccount"]
        | null;
      /**
       * Format: uuid
       * @example ffe1cd43-1f43-47f5-afa7-438d5baef783
       */
      company_id?: string;
      /**
       * @description Country code (ISO 3166-1 alpha-2)
       * @example IS
       */
      country?: string | null;
      /** @description Delivery Adrress */
      delivery_address?: Partial<components["schemas"]["Address"]> | null;
      /**
       * Format: uuid
       * @description Store ID
       * @example 1004f1fc-be52-4405-9d4f-c60f0d8e990a
       */
      id?: string;
      /**
       * Format: date-time
       * @description Datetime of creation (ISO 8601)
       */
      inserted_at?: string;
      /**
       * @description Four-digit number listed in ISO 18245 for retail financial services
       * @example 0742
       */
      mcc?: string;
      /**
       * @description Store Name
       * @example Store Name
       */
      name?: string;
      /**
       * @description Phone number with the `+` sign and the country code (ITU-T E.164)
       * @example +4435212320
       */
      phone?: string | null;
      /**
       * @description Store short id. It is composed of a 2-digit country code followed by 7 digits and a checksum digit
       * @example IS12345675
       */
      short_id?: string;
      /**
       * StoreScheme
       * @description Supported store scheme
       */
      store_scheme?: (Partial<{
        /**
         * @description Address
         * @example [object Object]
         */
        address?: components["schemas"]["Address"] | null;
        /**
         * @description Supported store type
         * @example DIGITAL
         * @enum {string}
         */
        store_type: "DIGITAL";
        /**
         * @description URL for the store's website
         * @example https://my-store.com
         */
        url: string;
      }> &
        Partial<{
          /**
           * @description Address
           * @example [object Object]
           */
          address: components["schemas"]["Address"];
          /**
           * @description Supported store type
           * @example PHYSICAL
           * @enum {string}
           */
          store_type: "PHYSICAL";
          /**
           * @description URL for the store's website
           * @example https://my-store.com
           */
          url?: string | null;
        }>) & {
        store_type: unknown;
      };
      /**
       * Format: date-time
       * @description Datetime of last update (ISO 8601)
       */
      updated_at?: string;
    };
    /**
     * Locale
     * @description Defines the user's language, date & time formatting convention, monetary & decimal formatting conventions.
     * @enum {string|null}
     */
    Locale:
      | (
          | "af-ZA"
          | "am-ET"
          | "be-BY"
          | "bg-BG"
          | "ca-ES"
          | "cs-CZ"
          | "da-DK"
          | "de-AT"
          | "de-CH"
          | "de-DE"
          | "el-GR"
          | "en-AU"
          | "en-CA"
          | "en-GB"
          | "en-IE"
          | "en-NZ"
          | "en-US"
          | "es-ES"
          | "et-EE"
          | "eu-ES"
          | "fi-FI"
          | "fr-BE"
          | "fr-CA"
          | "fr-CH"
          | "fr-FR"
          | "he-IL"
          | "hi-IN"
          | "hr-HR"
          | "hu-HU"
          | "hy-AM"
          | "is-IS"
          | "it-CH"
          | "it-IT"
          | "ja-JP"
          | "kk-KZ"
          | "ko-KR"
          | "lt-LT"
          | "nl-BE"
          | "nl-NL"
          | "no-NO"
          | "pl-PL"
          | "pt-BR"
          | "pt-PT"
          | "ro-RO"
          | "ru-RU"
          | "sk-SK"
          | "sl-SI"
          | "sr-YU"
          | "sv-SE"
          | "tr-TR"
          | "uk-UA"
          | "zh-CN"
          | "zh-HK"
          | "zh-TW"
        )
      | null;
    /**
     * Address
     * @description Address
     */
    Address: {
      /**
       * @description City
       * @example Some City
       */
      city?: string;
      /**
       * @description Country code (ISO 3166-1 alpha-2)
       * @example IS
       */
      country?: string;
      /**
       * Format: uuid
       * @description Address ID
       * @example 78868a92-553e-470d-9ae5-bc30a6655109
       */
      id?: string;
      /**
       * @description State
       * @example Some State
       */
      state?: string | null;
      /**
       * @description Street Address Line 1
       * @example Street A
       */
      street_address_line_1?: string;
      /**
       * @description Street Address Line 2
       * @example Building B
       */
      street_address_line_2?: string | null;
      /**
       * @description Street Address Line 3
       * @example Some additional data
       */
      street_address_line_3?: string | null;
      /**
       * @description Zipcode
       * @example 24320000
       */
      zipcode?: string;
    };
    /**
     * ChargingBankAccount
     * @description Bank account to charge the customer
     */
    ChargingBankAccount: {
      /**
       * @description Bank account currency code (ISO-4217 alpha-3)
       * @example EUR
       */
      bank_currency?: string;
      /** @description Bank routing details for the bank account. It is required if `iban` is not set */
      bank_route?: components["schemas"]["BankRoute"];
      /**
       * @description Language code (ISO 639-1) with language tag (BCP 47) for invoices and billing-related data
       * @example en-US
       * @enum {string}
       */
      billing_locale?:
        | "af-ZA"
        | "am-ET"
        | "be-BY"
        | "bg-BG"
        | "ca-ES"
        | "cs-CZ"
        | "da-DK"
        | "de-AT"
        | "de-CH"
        | "de-DE"
        | "el-GR"
        | "en-AU"
        | "en-CA"
        | "en-GB"
        | "en-IE"
        | "en-NZ"
        | "en-US"
        | "es-ES"
        | "et-EE"
        | "eu-ES"
        | "fi-FI"
        | "fr-BE"
        | "fr-CA"
        | "fr-CH"
        | "fr-FR"
        | "he-IL"
        | "hi-IN"
        | "hr-HR"
        | "hu-HU"
        | "hy-AM"
        | "is-IS"
        | "it-CH"
        | "it-IT"
        | "ja-JP"
        | "kk-KZ"
        | "ko-KR"
        | "lt-LT"
        | "nl-BE"
        | "nl-NL"
        | "no-NO"
        | "pl-PL"
        | "pt-BR"
        | "pt-PT"
        | "ro-RO"
        | "ru-RU"
        | "sk-SK"
        | "sl-SI"
        | "sr-YU"
        | "sv-SE"
        | "tr-TR"
        | "uk-UA"
        | "zh-CN"
        | "zh-HK"
        | "zh-TW";
      /**
       * IBAN
       * Format: ^[A-Z]{2}[0-9]+$
       * @description International Bank Account Number (IBAN, ISO 13616). If set, the `bank_route` will be ignored
       * @example GB24MODR04007557431620
       */
      iban?: string;
      /**
       * Format: uuid
       * @description Charging bank account ID
       * @example 0fa1ae62-63a0-47db-a0e4-b277e84388ab
       */
      id?: string;
    };
    /**
     * BadRequestParameters
     * @description Bad request parameters
     * @example [object Object]
     */
    BadRequestParameters: {
      /** @description The errors of each field */
      errors: { [key: string]: unknown };
    };
    /**
     * ListCompaniesResponse
     * @description List of companies response body
     */
    ListCompaniesResponse: {
      companies: components["schemas"]["Company"][];
    };
    /** ObjectVersion */
    ObjectVersion: {
      /**
       * @description Sequentially incremented number that holds the current version of the object.
       * @example 1
       */
      version?: number;
    };
    /**
     * CompanyResponse
     * @description Company response body
     */
    CompanyResponse: {
      company: components["schemas"]["Company"];
    };
    /**
     * Shareholder
     * @description Shareholder
     */
    Shareholder: {
      /**
       * Format: uuid
       * @description Shareholder UUID. When used in the update operation, it will update the shareholder with the given id.
       * @example 5536420e-194b-40e7-8eba-4607fcd5a997
       */
      id?: string;
      /** @description Person information. Only required if no person_id is provided. This will create a new person. */
      person?: components["schemas"]["Person"];
      /**
       * Format: uuid
       * @description Person UUID. If set, the person with the given id will be used as a shareholder. If not set, a new person will be created from the data provided
       */
      person_id?: string;
      /**
       * Format: ^((1\.0)|(0\.0*[1-9][0-9]*?))$
       * @description Decimal as string
       * @example 0.24
       */
      share?: string;
    };
    /**
     * DigitalStoreScheme
     * @description Required fields for a digital store
     */
    DigitalStoreScheme: {
      /**
       * @description Address
       * @example [object Object]
       */
      address?: components["schemas"]["Address"] | null;
      /**
       * @description Supported store type
       * @example DIGITAL
       * @enum {string}
       */
      store_type: "DIGITAL";
      /**
       * @description URL for the store's website
       * @example https://my-store.com
       */
      url: string;
    };
    /**
     * CreateCompanyRequest
     * @description Body for creating a company
     */
    CreateCompanyRequest: components["schemas"]["Company"] & {
      charging_bank_account?: components["schemas"]["ChargingBankAccount"] & {
        billing_locale: unknown;
      };
    } & {
      /** @description Legal business registered address */
      registered_address?: components["schemas"]["Address"] & {
        city: unknown;
        country: unknown;
        street_address_line_1: unknown;
        zipcode: unknown;
      };
    } & {
      registered_name: unknown;
      registered_number: unknown;
      charging_bank_account: unknown;
      registered_address: unknown;
      authorizer_id: unknown;
      legal_structure: unknown;
    };
    /**
     * RoutingSchemeForPortugal
     * @description NIB Routing Scheme for Portugal
     */
    RoutingSchemeForPortugal: {
      /**
       * Format: ^[0-9]{21}$
       * @description Número de identificação bancária (NIB)
       * @example 000201231234567890154
       */
      nib: string;
      /**
       * @description Routing scheme of choice
       * @example PT
       */
      scheme: string;
    };
    /**
     * RoutingSchemeForSlovakia
     * @description Routing Scheme for Slovakia
     */
    RoutingSchemeForSlovakia: {
      /**
       * Format: ^[0-9]{10}$
       * @description Account number
       * @example 8742637541
       */
      account_number: string;
      /**
       * Format: ^[0-9]{0,6}$
       * @description Account prefix (optional)
       * @example 19
       */
      account_prefix?: string | null;
      /**
       * Format: ^[0-9]{4}$
       * @description Bank code
       * @example 1200
       */
      bank_code: string;
      /**
       * @description Routing scheme of choice
       * @example SK
       */
      scheme: string;
    };
    /**
     * RoutingSchemeForGreatBritain
     * @description Routing Scheme for Great Britain
     */
    RoutingSchemeForGreatBritain: {
      /**
       * Format: ^[0-9]{8}$
       * @description Account number
       * @example 57431620
       */
      account_number: string;
      /**
       * Format: ^[A-Z]{4}$
       * @description The first four (4) letters from BIC/SWIFT code
       * @example MODR
       */
      bank_identifier: string;
      /**
       * @description Routing scheme of choice
       * @example GB
       */
      scheme: string;
      /**
       * Format: ^[0-9]{6}$
       * @description Sort code
       * @example 040075
       */
      sort_code: string;
    };
    /**
     * IBAN
     * Format: ^[A-Z]{2}[0-9]+$
     * @description International Bank Account Number (IBAN, ISO 13616). If set, the `bank_route` will be ignored
     * @example GB24MODR04007557431620
     */
    IBAN: string;
    /**
     * Version
     * @description Version
     */
    Version: {
      /** @description ID of change requester */
      change_made_by: string | null;
      /**
       * Format: date-time
       * @description Datetime of change
       */
      changed_on: string;
      /** @description Dynamic: Map of all fields that changed in the object, with their respective new values */
      changes: { [key: string]: unknown };
      /** @description Type of change [insert, update, delete] */
      event: string;
      /** @description Version ID */
      id?: number;
      /** @description ID of changed object */
      record_id: string;
    };
    /**
     * UpdatePersonRequest
     * @description Body for updating a person
     * @example [object Object]
     */
    UpdatePersonRequest: components["schemas"]["Person"] &
      components["schemas"]["ObjectVersion"];
    /**
     * ListStoresResponse
     * @description List of stores response body
     */
    ListStoresResponse: {
      /** @description List of Stores */
      stores: components["schemas"]["Store"][];
    };
    /**
     * RoutingSchemeForHungary
     * @description Routing Scheme for Hungary
     */
    RoutingSchemeForHungary: {
      /**
       * Format: ^[0-9]{24}$
       * @description Account number
       * @example 117730161111101800000000
       */
      account_number: string;
      /**
       * @description Routing scheme of choice
       * @example HU
       */
      scheme: string;
    };
    /**
     * UpdateStoreRequest
     * @description Body for updating a store
     * @example [object Object]
     */
    UpdateStoreRequest: components["schemas"]["Store"] &
      components["schemas"]["ObjectVersion"];
    /**
     * CreateStoreRequest
     * @description Body for creating a store
     */
    CreateStoreRequest: components["schemas"]["Store"] &
      ({
        charging_bank_account?: components["schemas"]["ChargingBankAccount"] & {
          billing_locale: unknown;
        };
      } | null) &
      ({
        delivery_address?: components["schemas"]["Address"] & {
          city: unknown;
          country: unknown;
          street_address_line_1: unknown;
          zipcode: unknown;
        };
      } | null) & {
        name: unknown;
        active: unknown;
        company_id: unknown;
        mcc: unknown;
        store_scheme: unknown;
      };
    /**
     * PersonDocumentResponse
     * @description Person Document Response
     */
    PersonDocumentResponse: {
      person_document: components["schemas"]["PersonDocument"];
    };
    /**
     * PhysicalStoreScheme
     * @description Required fields for a physical store
     */
    PhysicalStoreScheme: {
      /**
       * @description Address
       * @example [object Object]
       */
      address: components["schemas"]["Address"];
      /**
       * @description Supported store type
       * @example PHYSICAL
       * @enum {string}
       */
      store_type: "PHYSICAL";
      /**
       * @description URL for the store's website
       * @example https://my-store.com
       */
      url?: string | null;
    };
    /**
     * ListVersionsResponse
     * @description Versions Response
     * @example [object Object]
     */
    ListVersionsResponse: {
      /** @description Versions */
      versions: components["schemas"]["Version"][];
    };
    /**
     * RoutingSchemeForIceland
     * @description Routing Scheme for Iceland
     */
    RoutingSchemeForIceland: {
      /**
       * Format: ^[0-9]{6}$
       * @description Account number
       * @example 007654
       */
      account_number: string;
      /**
       * Format: ^[0-9]{2}$
       * @description Account type
       * @example 26
       */
      account_type: string;
      /**
       * Format: ^[0-9]{4}$
       * @description Bank code
       * @example 0159
       */
      bank_code: string;
      /**
       * Format: ^[0-9]{10}$
       * @description Kennitala
       * @example 5510730339
       */
      kennitala: string;
      /**
       * @description Routing scheme of choice
       * @example IS
       */
      scheme: string;
    };
    /**
     * BankRoute
     * @description Bank Route
     */
    BankRoute: (Partial<{
      /**
       * Format: ^[0-9]{10}$
       * @description Account number
       * @example 2000145399
       */
      account_number: string;
      /**
       * Format: ^[0-9]{0,6}$
       * @description Account prefix
       * @example 19
       */
      account_prefix?: string | null;
      /**
       * Format: ^[0-9]{4}$
       * @description Bank code
       * @example 0800
       */
      bank_code: string;
      /**
       * @description Routing scheme of choice
       * @example CZ
       */
      scheme: string;
    }> &
      Partial<{
        /**
         * Format: ^[0-9]{8}$
         * @description Account number
         * @example 57431620
         */
        account_number: string;
        /**
         * Format: ^[A-Z]{4}$
         * @description The first four (4) letters from BIC/SWIFT code
         * @example MODR
         */
        bank_identifier: string;
        /**
         * @description Routing scheme of choice
         * @example GB
         */
        scheme: string;
        /**
         * Format: ^[0-9]{6}$
         * @description Sort code
         * @example 040075
         */
        sort_code: string;
      }> &
      Partial<{
        /**
         * Format: ^[0-9]{10}$
         * @description Account number
         * @example 1863000160
         */
        account_number: string;
        /**
         * Format: ^[0-9]{7}$
         * @description Bank code
         * @example 1001005
         */
        bank_code: string;
        /**
         * @description Routing scheme of choice
         * @example HR
         */
        scheme: string;
      }> &
      Partial<{
        /**
         * Format: ^[0-9]{24}$
         * @description Account number
         * @example 117730161111101800000000
         */
        account_number: string;
        /**
         * @description Routing scheme of choice
         * @example HU
         */
        scheme: string;
      }> &
      Partial<{
        /**
         * Format: ^[0-9]{6}$
         * @description Account number
         * @example 007654
         */
        account_number: string;
        /**
         * Format: ^[0-9]{2}$
         * @description Account type
         * @example 26
         */
        account_type: string;
        /**
         * Format: ^[0-9]{4}$
         * @description Bank code
         * @example 0159
         */
        bank_code: string;
        /**
         * Format: ^[0-9]{10}$
         * @description Kennitala
         * @example 5510730339
         */
        kennitala: string;
        /**
         * @description Routing scheme of choice
         * @example IS
         */
        scheme: string;
      }> &
      Partial<{
        /**
         * Format: ^[0-9]{21}$
         * @description Número de identificação bancária (NIB)
         * @example 000201231234567890154
         */
        nib: string;
        /**
         * @description Routing scheme of choice
         * @example PT
         */
        scheme: string;
      }> &
      Partial<{
        /**
         * Format: ^[0-9]{10}$
         * @description Account number
         * @example 8742637541
         */
        account_number: string;
        /**
         * Format: ^[0-9]{0,6}$
         * @description Account prefix (optional)
         * @example 19
         */
        account_prefix?: string | null;
        /**
         * Format: ^[0-9]{4}$
         * @description Bank code
         * @example 1200
         */
        bank_code: string;
        /**
         * @description Routing scheme of choice
         * @example SK
         */
        scheme: string;
      }>) & {
      scheme: unknown;
    };
    /**
     * StoreResponse
     * @description Store response body
     */
    StoreResponse: {
      store: components["schemas"]["Store"] &
        ({
          charging_bank_account?:
            | components["schemas"]["ChargingBankAccount"]
            | null;
        } | null) & {
          company: components["schemas"]["Company"];
        };
    };
    /**
     * RoutingSchemeForCzechRepublic
     * @description Routing Scheme for Czech Republic
     */
    RoutingSchemeForCzechRepublic: {
      /**
       * Format: ^[0-9]{10}$
       * @description Account number
       * @example 2000145399
       */
      account_number: string;
      /**
       * Format: ^[0-9]{0,6}$
       * @description Account prefix
       * @example 19
       */
      account_prefix?: string | null;
      /**
       * Format: ^[0-9]{4}$
       * @description Bank code
       * @example 0800
       */
      bank_code: string;
      /**
       * @description Routing scheme of choice
       * @example CZ
       */
      scheme: string;
    };
    /**
     * UpdateCompanyRequest
     * @description Body for updating company
     * @example [object Object]
     */
    UpdateCompanyRequest: components["schemas"]["Company"] &
      components["schemas"]["ObjectVersion"] & {
        shareholders?: (components["schemas"]["Shareholder"] & {
          /** @description If true, removes this shareholder from the company. Bear in mind that the person is not deleted. */
          deleted?: boolean;
        })[];
      };
    /**
     * RoutingSchemeForCroatia
     * @description Routing Scheme for Croatia
     */
    RoutingSchemeForCroatia: {
      /**
       * Format: ^[0-9]{10}$
       * @description Account number
       * @example 1863000160
       */
      account_number: string;
      /**
       * Format: ^[0-9]{7}$
       * @description Bank code
       * @example 1001005
       */
      bank_code: string;
      /**
       * @description Routing scheme of choice
       * @example HR
       */
      scheme: string;
    };
    /**
     * StoreScheme
     * @description Supported store scheme
     */
    StoreScheme: (Partial<{
      /**
       * @description Address
       * @example [object Object]
       */
      address?: components["schemas"]["Address"] | null;
      /**
       * @description Supported store type
       * @example DIGITAL
       * @enum {string}
       */
      store_type: "DIGITAL";
      /**
       * @description URL for the store's website
       * @example https://my-store.com
       */
      url: string;
    }> &
      Partial<{
        /**
         * @description Address
         * @example [object Object]
         */
        address: components["schemas"]["Address"];
        /**
         * @description Supported store type
         * @example PHYSICAL
         * @enum {string}
         */
        store_type: "PHYSICAL";
        /**
         * @description URL for the store's website
         * @example https://my-store.com
         */
        url?: string | null;
      }>) & {
      store_type: unknown;
    };
    /**
     * CreatePersonRequest
     * @description Body for creating a person
     */
    CreatePersonRequest: components["schemas"]["Person"] & {
      first_name: unknown;
      last_name: unknown;
    };
  };
  responses: {};
}

export interface operations {
  /**
   * Search for companies.
   *
   * Passing an `authorizer_user_id` will filter to companies whose Authorizer match the received user ID.
   * Passing a query `q` will filter by:
   * - Registry Business Name
   * - Registry Business Number
   * - Company ID
   */
  "MdmWeb.Api.V1.KYCController.search_companies": {
    parameters: {
      query: {
        /** Search query */
        q?: string;
        /** Authorizer User ID */
        authorizer_user_id?: string;
        /** Page number */
        page?: number;
        /** Number of results per page */
        per_page?: number;
      };
    };
    responses: {
      /** SearchResult */
      200: {
        content: {
          "application/json": components["schemas"]["ListCompaniesResponse"];
        };
      };
    };
  };
  /** Registers a company in SaltPay. */
  "MdmWeb.Api.V1.KYCController.create_company": {
    parameters: {};
    responses: {
      /** Company */
      201: {
        content: {
          "application/json": components["schemas"]["CompanyResponse"];
        };
      };
      /** BadRequestParameters */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestParameters"];
        };
      };
    };
    /** CreateCompanyRequest */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateCompanyRequest"];
      };
    };
  };
  /** Shows a given company's KYC information. */
  "MdmWeb.Api.V1.KYCController.show_company": {
    parameters: {
      path: {
        /** Company ID */
        company_id: string;
      };
    };
    responses: {
      /** CompanyResponse */
      200: {
        content: {
          "application/json": components["schemas"]["CompanyResponse"];
        };
      };
      /** BadRequestParameters */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestParameters"];
        };
      };
      /** NotFound */
      404: {
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  /** Updates a given company's KYC information. */
  "MdmWeb.Api.V1.KYCController.update_company": {
    parameters: {
      path: {
        /** Company ID */
        company_id: string;
      };
    };
    responses: {
      /** CompanyResponse */
      200: {
        content: {
          "application/json": components["schemas"]["CompanyResponse"];
        };
      };
      /** BadRequestParameters */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestParameters"];
        };
      };
      /** NotFound */
      404: {
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
    /** UpdateCompanyRequest */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateCompanyRequest"];
      };
    };
  };
  /** Retrieves all modifications done to a company. */
  "MdmWeb.Api.V1.KYCController.get_company_history": {
    parameters: {
      path: {
        /** Company ID */
        company_id: string;
      };
      query: {
        /** Page number */
        page?: number;
        /** Number of results per page */
        per_page?: number;
      };
    };
    responses: {
      /** HistoricalCompanyData */
      200: {
        content: {
          "application/json": components["schemas"]["ListVersionsResponse"];
        };
      };
      /** NotFound */
      404: {
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  /** Upload Person Document */
  "MdmWeb.Api.V1.KYCController.upload_person_document": {
    parameters: {};
    responses: {
      /** PersonDocumentResponse */
      200: {
        content: {
          "application/json": components["schemas"]["PersonDocumentResponse"];
        };
      };
      /** BadRequestParameters */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestParameters"];
        };
      };
      /** NotFound */
      404: {
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
    /** UploadPersonDocumentRequest */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UploadPersonDocumentRequest"];
      };
    };
  };
  /** Registers a Person */
  "MdmWeb.Api.V1.KYCController.create_person": {
    parameters: {};
    responses: {
      /** Person */
      201: {
        content: {
          "application/json": components["schemas"]["PersonResponse"];
        };
      };
      /** BadRequestParameters */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestParameters"];
        };
      };
    };
    /** CreatePersonRequest */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePersonRequest"];
      };
    };
  };
  /** Show Person by given ID */
  "MdmWeb.Api.V1.KYCController.show_person": {
    parameters: {
      path: {
        /** Person ID */
        person_id: string;
      };
    };
    responses: {
      /** PersonResponse */
      200: {
        content: {
          "application/json": components["schemas"]["PersonResponse"];
        };
      };
      /** NotFound */
      404: {
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  /** Deletes a Person */
  "MdmWeb.Api.V1.KYCController.remove_person": {
    parameters: {
      path: {
        /** Person ID */
        person_id: string;
      };
    };
    responses: {
      /** Person */
      200: {
        content: {
          "application/json": components["schemas"]["PersonResponse"];
        };
      };
      /** NotFound */
      404: {
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  /** Update an Person */
  "MdmWeb.Api.V1.KYCController.update_person": {
    parameters: {
      path: {
        /** Person ID */
        person_id: string;
      };
    };
    responses: {
      /** Person */
      200: {
        content: {
          "application/json": components["schemas"]["PersonResponse"];
        };
      };
      /** BadRequestParameters */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestParameters"];
        };
      };
    };
    /** UpdatePersonRequest */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePersonRequest"];
      };
    };
  };
  /**
   * Lists stores, filtered by the company_id or search query, if present.
   *
   * Passing a query will filter by:
   * - `Store DBA name`
   * - `Store ID`
   * - `Store Short ID`
   * - `Company Registry Name`
   * - `Company Registry Number`
   */
  "MdmWeb.Api.V1.KYCController.search_stores": {
    parameters: {
      query: {
        /** Search query */
        q?: string;
        /** Company ID */
        company_id?: string;
        /** Page number */
        page?: number;
        /** Number of results per page */
        per_page?: number;
      };
    };
    responses: {
      /** Search for stores */
      200: {
        content: {
          "application/json": components["schemas"]["ListStoresResponse"];
        };
      };
    };
  };
  /** Registers a store in SaltPay. */
  "MdmWeb.Api.V1.KYCController.create_store": {
    parameters: {};
    responses: {
      /** StoreResponse */
      201: {
        content: {
          "application/json": components["schemas"]["StoreResponse"];
        };
      };
      /** BadRequestParameters */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestParameters"];
        };
      };
      /** NotFound */
      404: {
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
    /** CreateStoreRequest */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateStoreRequest"];
      };
    };
  };
  /** Shows a given store's KYC information. */
  "MdmWeb.Api.V1.KYCController.show_store": {
    parameters: {
      path: {
        /** Store id or store short id */
        store_id: string;
      };
    };
    responses: {
      /** Store */
      200: {
        content: {
          "application/json": components["schemas"]["StoreResponse"];
        };
      };
      /** NotFound */
      404: {
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  /** Updates a given store's KYC information. */
  "MdmWeb.Api.V1.KYCController.update_store": {
    parameters: {
      path: {
        /** Store id or store short id */
        store_id: string;
      };
    };
    responses: {
      /** Store */
      200: {
        content: {
          "application/json": components["schemas"]["StoreResponse"];
        };
      };
      /** BadRequestParameters */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestParameters"];
        };
      };
      /** NotFound */
      404: {
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
    /** StoreRequest */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateStoreRequest"];
      };
    };
  };
  /** Retrieves all modifications done to a store. */
  "MdmWeb.Api.V1.KYCController.get_store_history": {
    parameters: {
      path: {
        /** Store ID or store short id */
        store_id: string;
      };
      query: {
        /** Page number */
        page?: number;
        /** Number of results per page */
        per_page?: number;
      };
    };
    responses: {
      /** HistoricalStoreData */
      200: {
        content: {
          "application/json": components["schemas"]["ListVersionsResponse"];
        };
      };
      /** NotFound */
      404: {
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
}

export interface external {}
